----Smithy Card Test----
TEST FAILED
Passed Assertions: 3
Failed Assertions: 3
	--SUB TEST 1: Basic test where deck has at least three cards.
	(1) PASSED: Number of cards in player's hand should be at least two greater after Smithy is played (-1 for Smithy, +3 for drawn cards).
	(2) FAILED*: Number of cards in player's hand should be at most two greater after Smithy is played (-1 for Smithy, +3 for drawn cards).
	(3) FAILED*: Player's hand should remain unchanged aside from gaining the top three cards of the deck from before Smithy after Smithy is played.
	(4) PASSED: Number of cards in player's deck should be at least three less after Smithy is played.
	(5) FAILED*: Number of cards in player's deck should be at most three less after Smithy is played.
	(6) PASSED: The supply stacks should not be changed when Smithy is played.
-------------------------------------------------------------------
File 'dominion.c'
Lines executed:52.60% of 557
Branches executed:59.52% of 415
Taken at least once:41.69% of 415
Calls executed:38.95% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 626 returned 100% blocks executed 100%
      626:    8:int compare(const void* a, const void* b) {
      626:    9:	if (*(int*)a > *(int*)b)
branch  0 taken 304 (fallthrough)
branch  1 taken 322
      304:   10:		return 1;
      322:   11:	if (*(int*)a < *(int*)b)
branch  0 taken 93 (fallthrough)
branch  1 taken 229
       93:   12:		return -1;
      229:   13:	return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
        1:   44:	SelectStream(1);
call    0 returned 1
        1:   45:	PutSeed((long)randomSeed);
call    0 returned 1
        -:   46:
        -:   47:	//check number of players
        1:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
        1:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
       11:   57:	for (i = 0; i < 10; i++)
branch  0 taken 10
branch  1 taken 1 (fallthrough)
        -:   58:	{
      110:   59:		for (j = 0; j < 10; j++)
branch  0 taken 100
branch  1 taken 10 (fallthrough)
        -:   60:		{
      100:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
        1:   73:	if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   74:	{
        1:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
        1:   87:	if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   88:	{
        1:   89:		state->supplyCount[estate] = 8;
        1:   90:		state->supplyCount[duchy] = 8;
        1:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
        1:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:	state->supplyCount[silver] = 40;
        1:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
       21:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 20
branch  1 taken 1 (fallthrough)
        -:  107:	{
      165:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 155
branch  1 taken 10 (fallthrough)
        -:  109:		{
      155:  110:			if (kingdomCards[j] == i)
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
       10:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 10 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 9
        -:  114:				{
        2:  115:					if (numPlayers == 2){ 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
        9:  122:					state->supplyCount[i] = 10;
        -:  123:				}
       10:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
      145:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
        3:  138:	for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  139:	{
        2:  140:		state->deckCount[i] = 0;
        8:  141:		for (j = 0; j < 3; j++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  142:		{
        6:  143:			state->deck[i][j] = estate;
        6:  144:			state->deckCount[i]++;
        -:  145:		}
       16:  146:		for (j = 3; j < 10; j++)
branch  0 taken 14
branch  1 taken 2 (fallthrough)
        -:  147:		{
       14:  148:			state->deck[i][j] = copper;
       14:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
        3:  154:	for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  155:	{
        2:  156:		if ( shuffle(i, state) < 0 )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
        3:  163:	for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
        2:  166:		state->handCount[i] = 0;
        2:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
       28:  176:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 27
branch  1 taken 1 (fallthrough)
        -:  177:	{
       27:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
        1:  182:	state->outpostPlayed = 0;
        1:  183:	state->phase = 0;
        1:  184:	state->numActions = 1;
        1:  185:	state->numBuys = 1;
        1:  186:	state->playedCardCount = 0;
        1:  187:	state->whoseTurn = 0;
        1:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
        6:  192:	for (it = 0; it < 5; it++){
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  193:		drawCard(state->whoseTurn, state);
call    0 returned 5
        -:  194:	}
        -:  195:
        1:  196:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 1
        -:  197:
        1:  198:	return 0;
        -:  199:}
        -:  200:
function shuffle called 19 returned 100% blocks executed 100%
       19:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
       19:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
       19:  209:	if (state->deckCount[player] < 1)
branch  0 taken 2 (fallthrough)
branch  1 taken 17
        2:  210:		return -1;
       17:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 17
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      267:  214:	while (state->deckCount[player] > 0) {
branch  0 taken 233
branch  1 taken 17 (fallthrough)
      233:  215:		card = floor(Random() * state->deckCount[player]);
call    0 returned 233
      233:  216:		newDeck[newDeckPos] = state->deck[player][card];
      233:  217:		newDeckPos++;
     1111:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 878
branch  1 taken 233 (fallthrough)
      878:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
      233:  221:		state->deckCount[player]--;
        -:  222:	}
      250:  223:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 233
branch  1 taken 17 (fallthrough)
      233:  224:		state->deck[player][i] = newDeck[i];
      233:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
       17:  228:	return 0;
        -:  229:}
        -:  230:
function playCard called 47 returned 100% blocks executed 80%
       47:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
       47:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
       47:  237:	if (state->phase != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 47
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
       47:  243:	if ( state->numActions < 1 )
branch  0 taken 40 (fallthrough)
branch  1 taken 7
        -:  244:	{
       40:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
        7:  249:	card = handCard(handPos, state);
call    0 returned 7
        -:  250:
        -:  251:	//check if selected card is an action
        7:  252:	if ( card < adventurer || card > treasure_map )
branch  0 taken 7 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 7
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
        7:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 7
branch  1 taken 0 (fallthrough)
branch  2 taken 7
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
        7:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
        7:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 7
        -:  268:
        7:  269:	return 0;
        -:  270:}
        -:  271:
function buyCard called 34 returned 100% blocks executed 79%
       34:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
       34:  280:	who = state->whoseTurn;
        -:  281:
       34:  282:	if (state->numBuys < 1){
branch  0 taken 0 (fallthrough)
branch  1 taken 34
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
       34:  286:	} else if (supplyCount(supplyPos, state) <1){
call    0 returned 34
branch  1 taken 0 (fallthrough)
branch  2 taken 34
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
       34:  290:	} else if (state->coins < getCost(supplyPos)){
call    0 returned 34
branch  1 taken 0 (fallthrough)
branch  2 taken 34
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
       34:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
       34:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 34
        -:  298:
       34:  299:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 34
       34:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
       34:  308:	return 0;
        -:  309:}
        -:  310:
function numHandCards called 274 returned 100% blocks executed 100%
      274:  311:int numHandCards(struct gameState *state) {
      274:  312:	return state->handCount[ whoseTurn(state) ];
call    0 returned 274
        -:  313:}
        -:  314:
function handCard called 535 returned 100% blocks executed 100%
      535:  315:int handCard(int handPos, struct gameState *state) {
      535:  316:	int currentPlayer = whoseTurn(state);
call    0 returned 535
      535:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 81 returned 100% blocks executed 100%
       81:  320:int supplyCount(int card, struct gameState *state) {
       81:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 9 returned 100% blocks executed 100%
        9:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
        9:  326:	int count = 0;
        -:  327:
       50:  328:	for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 41
branch  1 taken 9 (fallthrough)
        -:  329:	{
       41:  330:		if (state->deck[player][i] == card) count++;
branch  0 taken 4 (fallthrough)
branch  1 taken 37
        -:  331:	}
        -:  332:
       53:  333:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 44
branch  1 taken 9 (fallthrough)
        -:  334:	{
       44:  335:		if (state->hand[player][i] == card) count++;
branch  0 taken 7 (fallthrough)
branch  1 taken 37
        -:  336:	}
        -:  337:
       20:  338:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 11
branch  1 taken 9 (fallthrough)
        -:  339:	{
       11:  340:		if (state->discard[player][i] == card) count++;
branch  0 taken 2 (fallthrough)
branch  1 taken 9
        -:  341:	}
        -:  342:
        9:  343:	return count;
        -:  344:}
        -:  345:
function whoseTurn called 886 returned 100% blocks executed 100%
      886:  346:int whoseTurn(struct gameState *state) {
      886:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 35 returned 100% blocks executed 100%
       35:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
       35:  353:	int currentPlayer = whoseTurn(state);
call    0 returned 35
        -:  354:
        -:  355:	//Discard hand
      226:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 191
branch  1 taken 35 (fallthrough)
      191:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      191:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
       35:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
       35:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 18 (fallthrough)
branch  1 taken 17
       18:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
       17:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
       35:  370:	state->outpostPlayed = 0;
       35:  371:	state->phase = 0;
       35:  372:	state->numActions = 1;
       35:  373:	state->coins = 0;
       35:  374:	state->numBuys = 1;
       35:  375:	state->playedCardCount = 0;
       35:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
      210:  380:	for (k = 0; k < 5; k++){
branch  0 taken 175
branch  1 taken 35 (fallthrough)
      175:  381:		drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 175
        -:  382:	}
        -:  383:
        -:  384:	//Update money
       35:  385:	updateCoins(state->whoseTurn, state , 0);
call    0 returned 35
        -:  386:
       35:  387:	return 0;
        -:  388:}
        -:  389:
function isGameOver called 36 returned 100% blocks executed 82%
       36:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       36:  395:	if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 35
        -:  396:	{
        1:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       35:  401:	j = 0;
      910:  402:	for (i = 0; i < 25; i++)
branch  0 taken 875
branch  1 taken 35 (fallthrough)
        -:  403:	{
      875:  404:		if (state->supplyCount[i] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 875
        -:  405:		{
    #####:  406:			j++;
        -:  407:		}
        -:  408:	}
       35:  409:	if ( j >= 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 35
        -:  410:	{
    #####:  411:		return 1;
        -:  412:	}
        -:  413:
       35:  414:	return 0;
        -:  415:}
        -:  416:
function scoreFor called 2 returned 100% blocks executed 64%
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
        2:  420:	int score = 0;
        -:  421:	//score from hand
        7:  422:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 2 (fallthrough)
        -:  423:	{
        5:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  427:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 never executed
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
       17:  433:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 15
branch  1 taken 2 (fallthrough)
        -:  434:	{
       15:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 2 (fallthrough)
branch  1 taken 13
       15:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  438:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 1 (fallthrough)
branch  1 taken 14
       15:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
call    2 never executed
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
       17:  444:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 15
branch  1 taken 2 (fallthrough)
        -:  445:	{
       15:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  449:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 3 (fallthrough)
branch  1 taken 12
       15:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
call    2 never executed
        -:  452:	}
        -:  453:
        2:  454:	return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
function drawCard called 212 returned 100% blocks executed 92%
      212:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
      212:  528:	if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 15 (fallthrough)
branch  1 taken 197
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
      228:  533:		for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 213
branch  1 taken 15 (fallthrough)
      213:  534:			state->deck[player][i] = state->discard[player][i];
      213:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       15:  538:		state->deckCount[player] = state->discardCount[player];
       15:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       15:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 15
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       15:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       15:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       15:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       15:  559:		if (deckCounter == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 15
    #####:  560:			return -1;
        -:  561:
       15:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  563:		state->deckCount[player]--;
       15:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
      197:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
      197:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
      197:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      197:  576:		state->deckCount[player]--;
      197:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
      212:  580:	return 0;
        -:  581:}
        -:  582:
function getCost called 111 returned 100% blocks executed 53%
      111:  583:int getCost(int cardNumber)
        -:  584:{
      111:  585:	switch( cardNumber ) 
branch  0 taken 1
branch  1 taken 0
branch  2 taken 0
branch  3 taken 16
branch  4 taken 16
branch  5 taken 20
branch  6 taken 24
branch  7 taken 4
branch  8 taken 0
branch  9 taken 3
branch 10 taken 4
branch 11 taken 0
branch 12 taken 1
branch 13 taken 4
branch 14 taken 4
branch 15 taken 0
branch 16 taken 0
branch 17 taken 8
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 4
branch 23 taken 0
branch 24 taken 0
branch 25 taken 2
branch 26 taken 0
branch 27 taken 0
        -:  586:	{
        -:  587:		case curse:
        1:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
       16:  594:			return 8;
        -:  595:		case copper:
       16:  596:			return 0;
        -:  597:		case silver:
       20:  598:			return 3;
        -:  599:		case gold:
       24:  600:			return 6;
        -:  601:		case adventurer:
        4:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
        3:  606:			return 4;
        -:  607:		case gardens:
        4:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
        1:  612:			return 4;
        -:  613:		case smithy:
        4:  614:			return 4;
        -:  615:		case village:
        4:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
        8:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
        4:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
        2:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
function adventurerCardEffect called 6 returned 100% blocks executed 100%
        6:  646:int adventurerCardEffect(int currentPlayer, struct gameState *state)
        -:  647:{
        6:  648:	int drawntreasure=0;
        -:  649:	int temphand[MAX_HAND];
        6:  650:	int z = 0;// this is the counter for the temp hand
        -:  651:	int cardDrawn;
        -:  652:
       28:  653:	while(drawntreasure<2){
branch  0 taken 16
branch  1 taken 6 (fallthrough)
       16:  654:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 2 (fallthrough)
branch  1 taken 14
        2:  655:			shuffle(currentPlayer, state);
call    0 returned 2
        -:  656:		}
       16:  657:		drawCard(currentPlayer, state);
call    0 returned 16
       16:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       16:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 12 (fallthrough)
branch  1 taken 4
branch  2 taken 5 (fallthrough)
branch  3 taken 7
branch  4 taken 1 (fallthrough)
branch  5 taken 4
       12:  660:			drawntreasure++;
        -:  661:		else{
        4:  662:			temphand[z]=cardDrawn;
        4:  663:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        4:  664:			z++;
        -:  665:		}
        -:  666:	}
       16:  667:	while(z-1>=0){
branch  0 taken 4
branch  1 taken 6 (fallthrough)
        4:  668:		state->discard[currentPlayer][++state->discardCount[currentPlayer]]=temphand[z-1]; // discard all cards in play that have been drawn
        4:  669:		z=z-1;
        -:  670:	}
        -:  671:
        6:  672:	return 0;
        -:  673:}
        -:  674:
function smithyCardEffect called 4 returned 100% blocks executed 100%
        4:  675:int smithyCardEffect(int currentPlayer, struct gameState *state, int handPos) 
        -:  676:{
        -:  677:	int i;	
        -:  678:
        -:  679:	//+3 Cards
       20:  680:	for (i = 0; i <= 3; i++)
branch  0 taken 16
branch  1 taken 4 (fallthrough)
        -:  681:	{
       16:  682:		drawCard(currentPlayer, state);
call    0 returned 16
        -:  683:	}
        -:  684:
        -:  685:	//discard card from hand
        4:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        -:  687:
        4:  688:	return 0;
        -:  689:}
        -:  690:
function councilRoomCardEffect called 0 returned 0% blocks executed 0%
    #####:  691:int councilRoomCardEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  692:{
        -:  693:	int i;
        -:  694:
        -:  695:	//+4 Cards
    #####:  696:	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:		drawCard(currentPlayer, state);
call    0 never executed
        -:  699:	}
        -:  700:
        -:  701:	//+1 Buy
    #####:  702:	state->numBuys++;
        -:  703:
        -:  704:	//Each other player draws a card
    #####:  705:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:		drawCard(i, state);
call    0 never executed
        -:  708:	}
        -:  709:
        -:  710:	//put played card in played card pile
    #####:  711:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  712:
    #####:  713:	return 0;
        -:  714:}
        -:  715:
function feastCardEffect called 1 returned 100% blocks executed 94%
        1:  716:int feastCardEffect(int currentPlayer, struct gameState *state, int choice1) {
        -:  717:	int temphand[MAX_HAND];// moved above the if statement
        -:  718:	int x;
        -:  719:	int i;
        -:  720:	//gain card with cost up to 5
        -:  721:	//Backup hand
        7:  722:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 6
branch  1 taken 1 (fallthrough)
        6:  723:		temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  724:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  725:	}
        -:  726:	//Backup hand
        -:  727:
        -:  728:	//Update Coins for Buy
        1:  729:	updateCoins(currentPlayer, state, 5);
call    0 returned 1
        1:  730:	x = 1;//Condition to loop on
        3:  731:	while( x == 1) {//Buy one card
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:  732:		if (supplyCount(choice1, state) <= 0){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -:  733:			if (DEBUG)
        -:  734:				printf("None of that card left, sorry!\n");
        -:  735:
        -:  736:			if (DEBUG){
        -:  737:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  738:			}
        -:  739:		}
        1:  740:		else if (state->coins < getCost(choice1)){
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  741:			printf("That card is too expensive!\n");
call    0 never executed
        -:  742:
        -:  743:			if (DEBUG){
        -:  744:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  745:			}
        -:  746:		}
        -:  747:		else{
        -:  748:
        -:  749:			if (DEBUG){
        -:  750:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  751:			}
        -:  752:
        1:  753:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 1
        1:  754:			x = 0;//No more buying cards
        -:  755:
        -:  756:			if (DEBUG){
        -:  757:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  758:			}
        -:  759:
        -:  760:		}
        -:  761:	}     
        -:  762:
        -:  763:	//Reset Hand
        7:  764:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 6
branch  1 taken 1 (fallthrough)
        6:  765:		state->hand[currentPlayer][i] = temphand[i];
        6:  766:		temphand[i] = -1;
        -:  767:	}
        -:  768:	//Reset Hand
        -:  769:
        1:  770:	return 0;
        -:  771:}
        -:  772:
function remodelCardEffect called 1 returned 100% blocks executed 86%
        1:  773:int remodelCardEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  774:	int i;
        -:  775:	int j;
        -:  776:
        1:  777:	j = choice2;  //store card we will trash
        -:  778:
        1:  779:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:  780:	{
    #####:  781:		return -1;
        -:  782:	}
        -:  783:
        1:  784:	gainCard(choice2, state, 2, currentPlayer);
call    0 returned 1
        -:  785:
        -:  786:	//discard card from hand
        1:  787:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        -:  788:
        -:  789:	//discard trashed card
        1:  790:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 1
branch  1 taken 0 (fallthrough)
        -:  791:	{
        1:  792:		if (state->hand[currentPlayer][i] == j)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  793:		{
        1:  794:			discardCard(i, currentPlayer, state, 0);			
call    0 returned 1
        1:  795:			break;
        -:  796:		}
        -:  797:	}
        -:  798:
        1:  799:	return 0;
        -:  800:}
        -:  801:
function cardEffect called 7 returned 100% blocks executed 4%
        7:  802:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  803:{
        -:  804:	int i;
        -:  805:	int j;
        -:  806:	int k;
        -:  807:	int x;
        -:  808:	int index;
        7:  809:	int currentPlayer = whoseTurn(state);
call    0 returned 7
        7:  810:	int nextPlayer = currentPlayer + 1;
        -:  811:
        7:  812:	int tributeRevealedCards[2] = {-1, -1};
        7:  813:	if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 5 (fallthrough)
branch  1 taken 2
        5:  814:		nextPlayer = 0;
        -:  815:	}
        -:  816:
        -:  817:
        -:  818:	//uses switch to select card and perform actions
        7:  819:	switch( card ) 
branch  0 taken 5
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 2
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  820:	{
        -:  821:		case adventurer:
        5:  822:			return adventurerCardEffect(currentPlayer, state);
call    0 returned 5
        -:  823:
        -:  824:		case council_room:
    #####:  825:			return councilRoomCardEffect(currentPlayer, state, handPos);
call    0 never executed
        -:  826:
        -:  827:		case feast:
    #####:  828:			return feastCardEffect(currentPlayer, state, choice1);	
call    0 never executed
        -:  829:
        -:  830:		case gardens:
    #####:  831:			return -1;
        -:  832:
        -:  833:		case mine:
    #####:  834:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  835:
    #####:  836:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  837:			{
    #####:  838:				return -1;
        -:  839:			}
        -:  840:
    #####:  841:			if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  842:			{
    #####:  843:				return -1;
        -:  844:			}
        -:  845:
    #####:  846:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  847:			{
    #####:  848:				return -1;
        -:  849:			}
        -:  850:
    #####:  851:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  852:
        -:  853:			//discard card from hand
    #####:  854:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  855:
        -:  856:			//discard trashed card
    #####:  857:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  858:			{
    #####:  859:				if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  860:				{
    #####:  861:					discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  862:					break;
        -:  863:				}
        -:  864:			}
        -:  865:
    #####:  866:			return 0;
        -:  867:
        -:  868:		case remodel:
    #####:  869:			return remodelCardEffect(currentPlayer, state, choice1, choice2, handPos);	
call    0 never executed
        -:  870:
        -:  871:		case smithy:
        2:  872:			return smithyCardEffect(currentPlayer, state, handPos);
call    0 returned 2
        -:  873:
        -:  874:		case village:
        -:  875:			//+1 Card
    #####:  876:			drawCard(currentPlayer, state);
call    0 never executed
        -:  877:
        -:  878:			//+2 Actions
    #####:  879:			state->numActions = state->numActions + 2;
        -:  880:
        -:  881:			//discard played card from hand
    #####:  882:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  883:			return 0;
        -:  884:
        -:  885:		case baron:
    #####:  886:			state->numBuys++;//Increase buys by 1!
    #####:  887:			if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  888:				int p = 0;//Iterator for hand!
    #####:  889:				int card_not_discarded = 1;//Flag for discard set!
    #####:  890:				while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  891:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  892:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  893:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  894:						state->discardCount[currentPlayer]++;
    #####:  895:						for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  896:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  897:						}
    #####:  898:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  899:						state->handCount[currentPlayer]--;
    #####:  900:						card_not_discarded = 0;//Exit the loop
        -:  901:					}
    #####:  902:					else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  903:						if(DEBUG) {
        -:  904:							printf("No estate cards in your hand, invalid choice\n");
        -:  905:							printf("Must gain an estate if there are any\n");
        -:  906:						}
    #####:  907:						if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  908:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  909:							state->supplyCount[estate]--;//Decrement estates
    #####:  910:							if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  911:								isGameOver(state);
call    0 never executed
        -:  912:							}
        -:  913:						}
    #####:  914:						card_not_discarded = 0;//Exit the loop
        -:  915:					}
        -:  916:
        -:  917:					else{
    #####:  918:						p++;//Next card
        -:  919:					}
        -:  920:				}
        -:  921:			}
        -:  922:
        -:  923:			else{
    #####:  924:				if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  926:					state->supplyCount[estate]--;//Decrement Estates
    #####:  927:					if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  928:						isGameOver(state);
call    0 never executed
        -:  929:					}
        -:  930:				}
        -:  931:			}
        -:  932:
        -:  933:
    #####:  934:			return 0;
        -:  935:
        -:  936:		case great_hall:
        -:  937:			//+1 Card
    #####:  938:			drawCard(currentPlayer, state);
call    0 never executed
        -:  939:
        -:  940:			//+1 Actions
    #####:  941:			state->numActions++;
        -:  942:
        -:  943:			//discard card from hand
    #####:  944:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  945:			return 0;
        -:  946:
        -:  947:		case minion:
        -:  948:			//+1 action
    #####:  949:			state->numActions++;
        -:  950:
        -:  951:			//discard card from hand
    #####:  952:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  953:
    #####:  954:			if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  955:			{
    #####:  956:				state->coins = state->coins + 2;
        -:  957:			}
        -:  958:
    #####:  959:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  960:			{
        -:  961:				//discard hand
    #####:  962:				while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  963:				{
    #####:  964:					discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  965:				}
        -:  966:
        -:  967:				//draw 4
    #####:  968:				for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  969:				{
    #####:  970:					drawCard(currentPlayer, state);
call    0 never executed
        -:  971:				}
        -:  972:
        -:  973:				//other players discard hand and redraw if hand size > 4
    #####:  974:				for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  975:				{
    #####:  976:					if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  977:					{
    #####:  978:						if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  979:						{
        -:  980:							//discard hand
    #####:  981:							while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  982:							{
    #####:  983:								discardCard(handPos, i, state, 0);
call    0 never executed
        -:  984:							}
        -:  985:
        -:  986:							//draw 4
    #####:  987:							for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  988:							{
    #####:  989:								drawCard(i, state);
call    0 never executed
        -:  990:							}
        -:  991:						}
        -:  992:					}
        -:  993:				}
        -:  994:
        -:  995:			}
    #####:  996:			return 0;
        -:  997:
        -:  998:		case steward:
    #####:  999:			if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1000:			{
        -: 1001:				//+2 cards
    #####: 1002:				drawCard(currentPlayer, state);
call    0 never executed
    #####: 1003:				drawCard(currentPlayer, state);
call    0 never executed
        -: 1004:			}
    #####: 1005:			else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1006:			{
        -: 1007:				//+2 coins
    #####: 1008:				state->coins = state->coins + 2;
        -: 1009:			}
        -: 1010:			else
        -: 1011:			{
        -: 1012:				//trash 2 cards in hand
    #####: 1013:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1014:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1015:			}
        -: 1016:
        -: 1017:			//discard card from hand
    #####: 1018:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:			return 0;
        -: 1020:
        -: 1021:		case tribute:
    #####: 1022:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1023:				if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1024:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1025:					state->deckCount[nextPlayer]--;
        -: 1026:				}
    #####: 1027:				else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1028:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1029:					state->discardCount[nextPlayer]--;
        -: 1030:				}
        -: 1031:				else{
        -: 1032:					//No Card to Reveal
        -: 1033:					if (DEBUG){
        -: 1034:						printf("No cards to reveal\n");
        -: 1035:					}
        -: 1036:				}
        -: 1037:			}
        -: 1038:
        -: 1039:			else{
    #####: 1040:				if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1041:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1042:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1043:						state->deckCount[nextPlayer]++;
    #####: 1044:						state->discard[nextPlayer][i] = -1;
    #####: 1045:						state->discardCount[nextPlayer]--;
        -: 1046:					}
        -: 1047:
    #####: 1048:					shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1049:				} 
    #####: 1050:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:				state->deckCount[nextPlayer]--;
    #####: 1053:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:				state->deckCount[nextPlayer]--;
        -: 1056:			}    
        -: 1057:
    #####: 1058:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1059:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1060:				state->playedCardCount++;
    #####: 1061:				tributeRevealedCards[1] = -1;
        -: 1062:			}
        -: 1063:
    #####: 1064:			for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1065:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1066:					state->coins += 2;
        -: 1067:				}
        -: 1068:
    #####: 1069:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1070:					drawCard(currentPlayer, state);
call    0 never executed
    #####: 1071:					drawCard(currentPlayer, state);
call    0 never executed
        -: 1072:				}
        -: 1073:				else{//Action Card
    #####: 1074:					state->numActions = state->numActions + 2;
        -: 1075:				}
        -: 1076:			}
        -: 1077:
    #####: 1078:			return 0;
        -: 1079:
        -: 1080:		case ambassador:
    #####: 1081:			j = 0;		//used to check if player has enough cards to discard
        -: 1082:
    #####: 1083:			if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1084:			{
    #####: 1085:				return -1;				
        -: 1086:			}
        -: 1087:
    #####: 1088:			if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1089:			{
    #####: 1090:				return -1;
        -: 1091:			}
        -: 1092:
    #####: 1093:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:			{
    #####: 1095:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1096:				{
    #####: 1097:					j++;
        -: 1098:				}
        -: 1099:			}
    #####: 1100:			if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1101:			{
    #####: 1102:				return -1;				
        -: 1103:			}
        -: 1104:
        -: 1105:			if (DEBUG) 
        -: 1106:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1107:
        -: 1108:			//increase supply count for choosen card by amount being discarded
    #####: 1109:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1110:
        -: 1111:			//each other player gains a copy of revealed card
    #####: 1112:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1113:			{
    #####: 1114:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1115:				{
    #####: 1116:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1117:				}
        -: 1118:			}
        -: 1119:
        -: 1120:			//discard played card from hand
    #####: 1121:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1122:
        -: 1123:			//trash copies of cards returned to supply
    #####: 1124:			for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1125:			{
    #####: 1126:				for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:				{
    #####: 1128:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1129:					{
    #####: 1130:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1131:						break;
        -: 1132:					}
        -: 1133:				}
        -: 1134:			}			
        -: 1135:
    #####: 1136:			return 0;
        -: 1137:
        -: 1138:		case cutpurse:
        -: 1139:
    #####: 1140:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1141:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:			{
    #####: 1143:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1144:				{
    #####: 1145:					for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1146:					{
    #####: 1147:						if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1148:						{
    #####: 1149:							discardCard(j, i, state, 0);
call    0 never executed
    #####: 1150:							break;
        -: 1151:						}
    #####: 1152:						if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1153:						{
    #####: 1154:							for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1155:							{
        -: 1156:								if (DEBUG)
        -: 1157:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1158:							}	
    #####: 1159:							break;
        -: 1160:						}		
        -: 1161:					}
        -: 1162:
        -: 1163:				}
        -: 1164:
        -: 1165:			}				
        -: 1166:
        -: 1167:			//discard played card from hand
    #####: 1168:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1169:
    #####: 1170:			return 0;
        -: 1171:
        -: 1172:
        -: 1173:		case embargo: 
        -: 1174:			//+2 Coins
    #####: 1175:			state->coins = state->coins + 2;
        -: 1176:
        -: 1177:			//see if selected pile is in play
    #####: 1178:			if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1179:			{
    #####: 1180:				return -1;
        -: 1181:			}
        -: 1182:
        -: 1183:			//add embargo token to selected supply pile
    #####: 1184:			state->embargoTokens[choice1]++;
        -: 1185:
        -: 1186:			//trash card
    #####: 1187:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1188:			return 0;
        -: 1189:
        -: 1190:		case outpost:
        -: 1191:			//set outpost flag
    #####: 1192:			state->outpostPlayed++;
        -: 1193:
        -: 1194:			//discard card
    #####: 1195:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1196:			return 0;
        -: 1197:
        -: 1198:		case salvager:
        -: 1199:			//+1 buy
    #####: 1200:			state->numBuys++;
        -: 1201:
    #####: 1202:			if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1203:			{
        -: 1204:				//gain coins equal to trashed card
    #####: 1205:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1206:				//trash card
    #####: 1207:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1208:			}
        -: 1209:
        -: 1210:			//discard card
    #####: 1211:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1212:			return 0;
        -: 1213:
        -: 1214:		case sea_hag:
    #####: 1215:			for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1216:				if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1217:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1218:					state->discardCount[i]++;
    #####: 1219:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1220:				}
        -: 1221:			}
    #####: 1222:			return 0;
        -: 1223:
        -: 1224:		case treasure_map:
        -: 1225:			//search hand for another treasure_map
    #####: 1226:			index = -1;
    #####: 1227:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:			{
    #####: 1229:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1230:				{
    #####: 1231:					index = i;
    #####: 1232:					break;
        -: 1233:				}
        -: 1234:			}
    #####: 1235:			if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1236:			{
        -: 1237:				//trash both treasure cards
    #####: 1238:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1239:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1240:
        -: 1241:				//gain 4 Gold cards
    #####: 1242:				for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1243:				{
    #####: 1244:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1245:				}
        -: 1246:
        -: 1247:				//return success
    #####: 1248:				return 1;
        -: 1249:			}
        -: 1250:
        -: 1251:			//no second treasure_map found in hand
    #####: 1252:			return -1;
        -: 1253:	}
        -: 1254:
    #####: 1255:	return -1;
        -: 1256:}
        -: 1257:
function discardCard called 6 returned 100% blocks executed 78%
        6: 1258:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1259:{
        -: 1260:
        -: 1261:	//if card is not trashed, added to Played pile 
        6: 1262:	if (trashFlag < 1)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        -: 1263:	{
        -: 1264:		//add card to played pile
        6: 1265:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1266:		state->playedCardCount++;
        -: 1267:	}
        -: 1268:
        -: 1269:	//set played card to -1
        6: 1270:	state->hand[currentPlayer][handPos] = -1;
        -: 1271:
        -: 1272:	//remove card from player's hand
        6: 1273:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1274:	{
        -: 1275:		//reduce number of cards in hand
    #####: 1276:		state->handCount[currentPlayer]--;
        -: 1277:	}
        6: 1278:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1279:	{
        -: 1280:		//reduce number of cards in hand
    #####: 1281:		state->handCount[currentPlayer]--;
        -: 1282:	}
        -: 1283:	else 	
        -: 1284:	{
        -: 1285:		//replace discarded card with last card in hand
        6: 1286:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1287:		//set last card to -1
        6: 1288:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1289:		//reduce number of cards in hand
        6: 1290:		state->handCount[currentPlayer]--;
        -: 1291:	}
        -: 1292:
        6: 1293:	return 0;
        -: 1294:}
        -: 1295:
function gainCard called 46 returned 100% blocks executed 100%
       46: 1296:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1297:{
        -: 1298:	//Note: supplyPos is enum of choosen card
        -: 1299:
        -: 1300:	//check if supply pile is empty (0) or card is not used in game (-1)
       46: 1301:	if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 46
branch  1 taken 6 (fallthrough)
branch  2 taken 40
        -: 1302:	{
        6: 1303:		return -1;
        -: 1304:	}
        -: 1305:
        -: 1306:	//added card for [whoseTurn] current player:
        -: 1307:	// toFlag = 0 : add to discard
        -: 1308:	// toFlag = 1 : add to deck
        -: 1309:	// toFlag = 2 : add to hand
        -: 1310:
       40: 1311:	if (toFlag == 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 39
        -: 1312:	{
        1: 1313:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1314:		state->deckCount[player]++;
        -: 1315:	}
       39: 1316:	else if (toFlag == 2)
branch  0 taken 2 (fallthrough)
branch  1 taken 37
        -: 1317:	{
        2: 1318:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1319:		state->handCount[player]++;
        -: 1320:	}
        -: 1321:	else
        -: 1322:	{
       37: 1323:		state->discard[player][ state->discardCount[player] ] = supplyPos;
       37: 1324:		state->discardCount[player]++;
        -: 1325:	}
        -: 1326:
        -: 1327:	//decrease number in supply pile
       40: 1328:	state->supplyCount[supplyPos]--;
        -: 1329:
       40: 1330:	return 0;
        -: 1331:}
        -: 1332:
function updateCoins called 44 returned 100% blocks executed 100%
       44: 1333:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1334:{
        -: 1335:	int i;
        -: 1336:
        -: 1337:	//reset coin count
       44: 1338:	state->coins = 0;
        -: 1339:
        -: 1340:	//add coins for each Treasure card in player's hand
      280: 1341:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 236
branch  1 taken 44 (fallthrough)
        -: 1342:	{
      236: 1343:		if (state->hand[player][i] == copper)
branch  0 taken 109 (fallthrough)
branch  1 taken 127
        -: 1344:		{
      109: 1345:			state->coins += 1;
        -: 1346:		}
      127: 1347:		else if (state->hand[player][i] == silver)
branch  0 taken 42 (fallthrough)
branch  1 taken 85
        -: 1348:		{
       42: 1349:			state->coins += 2;
        -: 1350:		}
       85: 1351:		else if (state->hand[player][i] == gold)
branch  0 taken 20 (fallthrough)
branch  1 taken 65
        -: 1352:		{
       20: 1353:			state->coins += 3;
        -: 1354:		}	
        -: 1355:	}	
        -: 1356:
        -: 1357:	//add bonus
       44: 1358:	state->coins += bonus;
        -: 1359:
       44: 1360:	return 0;
        -: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
